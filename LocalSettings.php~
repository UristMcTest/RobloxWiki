<?php
# This file was automatically generated by the MediaWiki 1.17.0
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# http://www.mediawiki.org/wiki/Manual:Configuration_settings

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}

## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename      = "TestWiki";
$wgMetaNamespace = "TestWiki";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs please see:
## http://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath       = "/mediawiki";
$wgScriptExtension  = ".php";

## The relative URL path to the skins directory
$wgStylePath        = "$wgScriptPath/skins";

## The relative URL path to the logo.  Make sure you change this from the default,
## or else you'll overwrite your logo when you upgrade!
$wgLogo             = "$wgScriptPath/RobloxWiki.png";

## UPO means: this is also a user preference option

$wgEnableEmail      = true;
$wgEnableUserEmail  = true; # UPO

$wgEmergencyContact = "lsparks@roblox.com";
$wgPasswordSender   = "lsparks@roblox.com";

$wgEnotifUserTalk      = false; # UPO
$wgEnotifWatchlist     = false; # UPO
$wgEmailAuthentication = true;

## Database settings
$wgDBtype           = "mysql";
$wgDBserver         = "127.0.0.1";
$wgDBname           = "bitnami_mediawiki";
$wgDBuser           = "bitnami";
$wgDBpassword       = "d5e0e912b4";

# MySQL specific settings
$wgDBprefix         = "";

# MySQL table options to use during installation or update
$wgDBTableOptions   = "ENGINE=InnoDB, DEFAULT CHARSET=utf8";

# Experimental charset support for MySQL 4.1/5.0.
$wgDBmysql5 = false;

## Shared memory settings
$wgMainCacheType    = CACHE_NONE;
$wgMemCachedServers = array();

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads  = true;
$wgUseImageMagick = false;
$wgImageMagickConvertCommand = "/home/lsparks/mediawiki-1.22.2-0/common/bin/convert";

# InstantCommons allows wiki to use images from http://commons.wikimedia.org
$wgUseInstantCommons  = false;

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale
$wgShellLocale = "en_US.utf8";

## If you want to use image uploads under safe mode,
## create the directories images/archive, images/thumb and
## images/temp, and make them all writable. Then uncomment
## this, if it's not already uncommented:
#$wgHashedUploadDirectory = false;

## If you have the appropriate support software installed
## you can enable inline LaTeX equations:
$wgUseTeX           = false;

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publically accessible from the web.
#$wgCacheDirectory = "$IP/cache";

# Site language code, should be one of ./languages/Language(.*).php
$wgLanguageCode = "en";

$wgSecretKey = "d454222c3b17e37027e602a887e91d29967d5a86943474c13ada1cd01ae4ec68";

# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
$wgUpgradeKey = "a5fbfd4d2ba1eb3a";

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'standard', 'nostalgia', 'cologneblue', 'monobook', 'vector':
$wgDefaultSkin = "xblock";

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
#$wgEnableCreativeCommonsRdf = true;
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl  = "";
$wgRightsText = "";
$wgRightsIcon = "";
# $wgRightsCode = ""; # Not yet used

# Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = "/usr/bin/diff3";



# Query string length limit for ResourceLoader. You should only set this if
# your web server has a query string length limit (then set it to that limit),
# or if you have suhosin.get.max_value_length set in php.ini (then set it to
# that value)
$wgResourceLoaderMaxQueryLength = -1;


# End of automatically generated settings.
# Add more configuration options below.
$wgGroupPermissions['Trusted'] = $wgGroupPermissions['user'];
$wgGroupPermissions['Trusted']['edit'] = true;

define("NS_TUTORIAL", 100);
define("NS_TUTORIAL_TALK", 101);

$wgExtraNamespaces = 
	array(100 => "Tutorial",
	      101 => "Tutorial_talk",
	);

$wgNamespaceProtection[NS_TUTORIAL] = array('tutorial-edit');
$wgNamespaceProtection[NS_TUTORIAL_TALK] = array('tutorial-talk-edit');

$wgGroupPermissions['tutorialwriters']['tutorial-edit'] = true;
$wgGroupPermissions['tutorialwriters']['tutorial-talk-edit'] = true;

require_once "$IP/extensions/Widgets/Widgets.php";

define("NS_API", 100);
define("NS_API_TALK", 101);

$wgExtraNamespaces = 
	array(102 => "API",
	      103 => "API_talk",
	);

$wgNamespaceProtection[NS_TUTORIAL] = array('api-edit');
$wgNamespaceProtection[NS_TUTORIAL_TALK] = array('api-talk-edit');

$wgGroupPermissions['apiwriter']['api-edit'] = true;
$wgGroupPermissions['apiwriter']['api-talk-edit'] = true;

$wgGroupPermissions['*']['viewlinktolatests'] = false;
$wgGroupPermissions['laker']['viewlinktolatest'] = true;
$wgGroupPermissions['laker']['approverevisions'] = true;

require_once __DIR__ . "/extensions/Scribunto/Scribunto.php";
$wgScribuntoDefaultEngine = 'luastandalone';

require_once __DIR__ . "/extensions/Gadgets/Gadgets.php";
require_once __DIR__ . "/extensions/WikiEditor/WikiEditor.php";
require_once "$IP/extensions/FlaggedRevs/FlaggedRevs.php";
require_once( "$IP/extensions/CodeEditor/CodeEditor.php" );
require_once "$IP/extensions/SyntaxHighlight_GeSHi/SyntaxHighlight_GeSHi.php";
require_once "$IP/extensions/ApprovedRevs/ApprovedRevs.php";

#hide title line
$wgRestrictDisplayTitle = false;

#google analytics stuff
require_once "$IP/extensions/googleAnalytics/googleAnalytics.php";
$wgGoogleAnalyticsAccout = "UA-48290203-1";

#RSS reader
require_once "$IP/extensions/RSS/RSS.php";
$wgRSSUrlWhitelist = array("*");
$wgRSSUrlNumberOfAllowedRedirects = 2;
$wgRSSAllowLinkTag = true;
$wgAllowImageTag = true;

#require_once "$IP/extensions/RSSReader/RSSReader.php";

#require_once "$IP/extensions/SimplePie/simplepie_mediawiki.php";

#setup debug log file
#$wgDebugLogFile = "/tmp/debug-{$wgDBname}.log";

$wgScribuntoUseGeSHi = true;
$wgCodeEditorEnableCore = true;
$wgScribuntoUseCodeEditor = true;
$wgDefaultUersOptions['usebetatoolbar'] = 1;
$wgDefaultUserOptions['usebetatoolbar-cgd'] = 1;

$wgAllowExternalImages = true;

#$wgFlaggedRevsStatsAge = false;
#$wgShowExceptionDetails = true;

$wgShowExceptionDetails = true;
#$wgShowDebug = true;
#$wgDevelopmentWarnings = true;

require_once("$IP/extensions/CSS/CSS.php");
require_once("$IP/extensions/Less/Less.php");

require_once("$IP/skins/erudite/erudite.php");
require_once("$IP/extensions/Bootstrap/Bootstrap.php");
require_once("$IP/skins/xblock/xblock.php");

require_once("$IP/extensions/RobloxLandingPage/RobloxLandingPage.php");
require_once("$IP/skins/chameleon/chameleon.php");

require_once "$IP/extensions/ParserFunctions/ParserFunctions.php";

$wgHooks['SkinTemplateOutputPageBeforeExec'][] = 'lfTOSLink';
function lfTOSLink( $sk, &$tpl ) {
	$tpl->set( 'termsofservice', $sk->footerLink( 'termsofservice', 'termsofservicepage' ) );
	$tpl->data['footerlinks']['places'][] = 'termsofservice';
	return true;
}

error_reporting(-1);
ini_set('display_errors',1);
